{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/briansoldani/code/RGG_Tours/client/src/pages/Booking.js\";\n\nimport React from 'react';\nimport { Grid, Cell } from 'react-mdl';\nimport { GoogleLogin } from 'react-google-login';\nimport API from \"../utils/API\";\n/* import jwt from 'jsonwebtoken'; */\n\nvar clientId = \"205158470591-frud5g1h9dmquka6n1e3mhju7rglm33i.apps.googleusercontent.com\";\n\nvar Booking = function Booking(props) {\n  var onAuthSuccess = function onAuthSuccess(res) {\n    console.log(res);\n    var setUser = props.setUser;\n    API.getUser(res.profileObj); //we can use this to get user info from saved token, so they don't have to log in again. -store in browser? local storage or session storage\n    // fetch(\"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\" + res.tokenId).then(res => res.json()).then(res => {\n    //   //make a database req to check if user exists; if exists=> signin, if not, find a way to add user to db.\n    //   API.getUser(res)\n    //   setUser(res);\n    // });\n  };\n\n  var onAuthFailure = function onAuthFailure(res) {\n    console.log(res);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      margin: 'auto'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: \"landing-grid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Cell, {\n    col: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"auth\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default Booking;","map":{"version":3,"sources":["/Users/briansoldani/code/RGG_Tours/client/src/pages/Booking.js"],"names":["React","Grid","Cell","GoogleLogin","API","clientId","Booking","props","onAuthSuccess","res","console","log","setUser","getUser","profileObj","onAuthFailure","width","margin"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,WAA3B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA;;AAEA,IAAMC,QAAQ,GAAG,0EAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAS;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAD6B,QAErBG,OAFqB,GAETL,KAFS,CAErBK,OAFqB;AAG7BR,IAAAA,GAAG,CAACS,OAAJ,CAAYJ,GAAG,CAACK,UAAhB,EAH6B,CAI7B;AACA;AACA;AACA;AACA;AACA;AACD,GAVD;;AAYA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACN,GAAD,EAAS;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CADF,CADF,CADF;AAYD,CA7BD;;AA+BA,eAAeX,OAAf","sourcesContent":["import React from 'react';\nimport { Grid, Cell } from 'react-mdl';\nimport { GoogleLogin } from 'react-google-login';\nimport API from \"../utils/API\"\n/* import jwt from 'jsonwebtoken'; */\n\nconst clientId = \"205158470591-frud5g1h9dmquka6n1e3mhju7rglm33i.apps.googleusercontent.com\";\n\nconst Booking = (props) => {\n  const onAuthSuccess = (res) => {\n    console.log(res);\n    const { setUser } = props;\n    API.getUser(res.profileObj)\n    //we can use this to get user info from saved token, so they don't have to log in again. -store in browser? local storage or session storage\n    // fetch(\"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\" + res.tokenId).then(res => res.json()).then(res => {\n    //   //make a database req to check if user exists; if exists=> signin, if not, find a way to add user to db.\n    //   API.getUser(res)\n    //   setUser(res);\n    // });\n  }\n\n  const onAuthFailure = (res) => {\n    console.log(res);\n  }\n\n  return (\n    <div style={{ width: '100%', margin: 'auto' }}>\n      <Grid className=\"landing-grid\">\n        <Cell col={12}>\n          {\n        \n        <auth />\n          }\n        </Cell>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Booking;"]},"metadata":{},"sourceType":"module"}