{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/briansoldani/code/RGG_Tours/client/src/pages/Booking.js\";\n\nimport React from 'react';\nimport { Grid, Cell } from 'react-mdl';\nimport { GoogleLogin } from 'react-google-login';\nimport API from \"../utils/API\";\n/* import jwt from 'jsonwebtoken'; */\n\nvar clientId = \"205158470591-frud5g1h9dmquka6n1e3mhju7rglm33i.apps.googleusercontent.com\";\n\nvar Booking = function Booking(props) {\n  var onAuthSuccess = function onAuthSuccess(res) {\n    console.log(res);\n    var setUser = props.setUser;\n    API.getUser(res.profileObj); //we can use this to get user info from saved token, so they don't have to log in again. -store in browser? local storage or session storage\n\n    fetch(\"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\" + res.tokenId).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      //   //make a database req to check if user exists; if exists=> signin, if not, find a way to add user to db.\n      API.getUser(res);\n      setUser(res);\n    });\n  };\n\n  var onAuthFailure = function onAuthFailure(res) {\n    console.log(res);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      margin: 'auto'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: \"booking-grid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Cell, {\n    col: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, props.user === null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }\n  }, \"book with us and please login with your google account\")), /*#__PURE__*/React.createElement(GoogleLogin, {\n    className: \"button-login\",\n    clientId: clientId //append client ID to user \n    ,\n    buttonText: \"Login\",\n    onSuccess: onAuthSuccess,\n    onFailure: onAuthFailure,\n    cookiePolicy: 'single_host_origin',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }\n  }, \"Welcome \", props.user.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }\n  }, \"Logged in as: \", props.user.email)))));\n};\n\nexport default Booking;","map":{"version":3,"sources":["/Users/briansoldani/code/RGG_Tours/client/src/pages/Booking.js"],"names":["React","Grid","Cell","GoogleLogin","API","clientId","Booking","props","onAuthSuccess","res","console","log","setUser","getUser","profileObj","fetch","tokenId","then","json","onAuthFailure","width","margin","user","name","email"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,WAA3B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA;;AAEA,IAAMC,QAAQ,GAAG,0EAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAS;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAD6B,QAErBG,OAFqB,GAETL,KAFS,CAErBK,OAFqB;AAG7BR,IAAAA,GAAG,CAACS,OAAJ,CAAYJ,GAAG,CAACK,UAAhB,EAH6B,CAI7B;;AACAC,IAAAA,KAAK,CAAC,6DAA6DN,GAAG,CAACO,OAAlE,CAAL,CAAgFC,IAAhF,CAAqF,UAAAR,GAAG;AAAA,aAAIA,GAAG,CAACS,IAAJ,EAAJ;AAAA,KAAxF,EAAwGD,IAAxG,CAA6G,UAAAR,GAAG,EAAI;AACpH;AACEL,MAAAA,GAAG,CAACS,OAAJ,CAAYJ,GAAZ;AACAG,MAAAA,OAAO,CAACH,GAAD,CAAP;AACD,KAJD;AAKD,GAVD;;AAYA,MAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAACV,GAAD,EAAS;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEW,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEId,KAAK,CAACe,IAAN,KAAe,IAAf,gBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAoBG,uDACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADD,CApBH,eAwBE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,cAAvB;AACE,IAAA,QAAQ,EAAEjB,QADZ,CAEE;AAFF;AAGE,IAAA,UAAU,EAAC,OAHb;AAIE,IAAA,SAAS,EAAEG,aAJb;AAKE,IAAA,SAAS,EAAEW,aALb;AAME,IAAA,YAAY,EAAE,oBANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,CADF,gBAmCI,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaZ,KAAK,CAACe,IAAN,CAAWC,IAAxB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAmBhB,KAAK,CAACe,IAAN,CAAWE,KAA9B,CAFF,CArCR,CADF,CADF,CADF;AAkDD,CAnED;;AAqEA,eAAelB,OAAf","sourcesContent":["import React from 'react';\nimport { Grid, Cell } from 'react-mdl';\nimport { GoogleLogin } from 'react-google-login';\nimport API from \"../utils/API\"\n/* import jwt from 'jsonwebtoken'; */\n\nconst clientId = \"205158470591-frud5g1h9dmquka6n1e3mhju7rglm33i.apps.googleusercontent.com\";\n\nconst Booking = (props) => {\n  const onAuthSuccess = (res) => {\n    console.log(res);\n    const { setUser } = props;\n    API.getUser(res.profileObj)\n    //we can use this to get user info from saved token, so they don't have to log in again. -store in browser? local storage or session storage\n    fetch(\"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\" + res.tokenId).then(res => res.json()).then(res => {\n    //   //make a database req to check if user exists; if exists=> signin, if not, find a way to add user to db.\n      API.getUser(res)\n      setUser(res);\n    });\n  }\n\n  const onAuthFailure = (res) => {\n    console.log(res);\n  }\n\n  return (\n    <div style={{ width: '100%', margin: 'auto' }}>\n      <Grid className=\"booking-grid\">\n        <Cell col={12}>\n          {\n            props.user === null ? (\n              <>\n                <br></br>\n\n                {/* <div>\n                  <Textfield\n                    onChange={() => { }}\n                    label=\"USERNAME\"\n                    floatingLabel\n                  />\n                  <br></br>\n                  \n                  <Textfield\n                    onChange={() => { }}\n                    pattern=\"-?[0-9]*(\\.[0-9]+)?\"\n                    error=\"Input is not a number!\"\n                    label=\"PASSWORD\"\n                    floatingLabel\n                  />\n                  <Button type=\"submit\" bsStyle=\"primary\">Sign-In</Button>\n                </div> */}\n                 <>\n                  <h1>book with us and please login with your google account</h1>\n                  \n                </>\n                <GoogleLogin className=\"button-login\"\n                  clientId={clientId}\n                  //append client ID to user \n                  buttonText=\"Login\"\n                  onSuccess={onAuthSuccess}\n                  onFailure={onAuthFailure}\n                  cookiePolicy={'single_host_origin'}\n                />\n              </>\n            ) : (\n                <>\n                  <h1>Welcome {props.user.name}</h1>\n                  <h2>Logged in as: {props.user.email}</h2>\n                </>\n              )\n          }\n        </Cell>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Booking;"]},"metadata":{},"sourceType":"module"}